---

- name: Pull sources from the repository.
  git: repo={{project_base_repo}}/{{ item}}.git dest={{ project_root }}/code/{{ item }}
  sudo: true
  sudo_user: "{{ project_user }}"
  with_items: "{{ project_repositories }}"

  #notify:
  #  - restart web frontend

#- name: Upgrade the virtualenv.
#  pip: name={{ project_root }}/code/caliopen.web virtualenv={{ project_root }}/env/
#  sudo: true
#  sudo_user: "{{ project_name }}"

# XXX : temporary until python packaging is OK
- name: remove previous caliop package
  pip: name={{ item }} state=absent virtualenv={{ project_root }}/env/
  sudo: true
  sudo_user: "{{ project_user }}"
  with_items: "{{ project_repositories }}"

- name: python setup.py develop caliopen
  raw: cd {{ project_root }} && source env/bin/activate && cd code/{{ item }} && if [[ -f "setup.py" ]]; then python setup.py develop; fi
  sudo: true
  sudo_user: "{{ project_user }}"
  with_items: "{{ project_repositories }}"

- name: pip install requirements
  raw: cd {{ project_root }} && source env/bin/activate && cd code/{{ item }} && if [[ -f "requirements.txt" ]]; then pip install -r requirements.txt; fi
  sudo: true
  sudo_user: "{{ project_user }}"
  with_items: "{{ project_repositories }}"

- name: configure caliop
  template: src=caliopen.yaml.j2 dest={{ project_root }}/code/{{ project_name }}.web/{{ project_name}}.yaml
  sudo: true
  sudo_user: "{{ project_user }}"

- name: npm install for angularjs app
  command: npm install chdir={{ project_root }}/code/caliopen.ng
  sudo: true
  sudo_user: "{{ project_user }}"

- name: bower install for angularjs app
  command: bower install chdir={{ project_root }}/code/caliopen.ng
  sudo: true
  sudo_user: "{{ project_user }}"

- name: grunt build for angularjs app
  command: grunt light_build chdir={{ project_root }}/code/{{ project_name }}.ng
  sudo: true
  sudo_user: "{{ project_user }}"

- name: grunt compile for angularjs app
  command: grunt compile chdir={{ project_root }}/code/{{ project_name }}.ng
  sudo: true
  sudo_user: "{{ project_user }}"

- name: deploy pserve configuration script
  template: src=production.ini.j2 dest={{ project_root }}/code/{{ project_name }}.web/production.ini
  sudo: true
  sudo_user: "{{ project_user }}"

- name: deploy pserve helper script
  template: src=pserve.sh.j2 dest={{ project_root }}/pserve.sh mode=0755
  sudo: true
  sudo_user: "{{ project_user }}"

#- name: chown project to correct owner
#  command: chown -R "{{ project_name }}:{{ project_name }}"  {{ project_root }}

- name: stop previous pserve dameon
  command: pkill pserve
  ignore_errors: yes
  sudo: true
  sudo_user: "{{ project_user }}"

- name: start pserve
  command: ./pserve.sh chdir={{ project_root }}
  sudo: true
  sudo_user: "{{ project_user }}"
